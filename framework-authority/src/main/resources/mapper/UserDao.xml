<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.myland.framework.authority.dao.UserDao">

    <insert id="insert" parameterType="User" useGeneratedKeys="true"
            keyProperty="id">
        INSERT INTO auth_user
        (
        `ACCOUNT`,
        `PASSWD`,
        `NAME`,
        `SEX`,
        `PHONE`,
        `AVATAR`,
        `CREATOR`,
        `MODIFIER`
        )
        VALUES
        (
        #{account},
        #{passwd},
        #{name},
        #{sex},
        #{phone},
        #{avatar},
        #{creator},
        #{modifier}
        )
    </insert>

    <delete id="deleteByPrimaryKey">
        UPDATE auth_user SET DELETED = 1 WHERE ID = #{value}
    </delete>

    <update id="updateByPrimaryKeySelective" parameterType="User">
        UPDATE auth_user
        <set>
            <if test="account != null">`ACCOUNT` =
                #{account},
            </if>
            <if test="passwd != null">`PASSWD` =
                #{passwd},
            </if>
            <if test="name != null">`NAME` =
                #{name},
            </if>
            <if test="sex != null">`SEX` =
                #{sex},
            </if>
            <if test="phone != null">`PHONE` =
                #{phone},
            </if>
            <if test="avatar != null">`AVATAR` =
                #{avatar},
            </if>
            <if test="status != null">`STATUS` =
                #{status},
            </if>
            <if test="creator != null">`CREATOR` =
                #{creator},
            </if>
            <if test="createTime != null">`CREATE_TIME` =
                #{createTime},
            </if>
            <if test="modifier != null">`MODIFIER` =
                #{modifier},
            </if>
        </set>
        WHERE ID = #{id}
    </update>

    <select id="selectByPrimaryKey" resultType="User">
        SELECT * FROM auth_user WHERE ID = #{value}
    </select>

    <select id="selectList" resultType="User">
        SELECT
        auth_user.ID,
        auth_user.ACCOUNT,
        auth_user.NAME,
        auth_user.SEX,
        auth_user.PHONE,
        auth_user.AVATAR,
        auth_user.STATUS,
        auth_user.CREATOR,
        auth_user.CREATE_TIME,
        auth_user.MODIFIER,
        auth_user.MODIFY_TIME,
        crt.name AS creatorName,
        mdf.name AS modifierName,
        (
        SELECT
        GROUP_CONCAT(auth_role.`NAME`)
        FROM
        auth_user_role
        JOIN auth_role ON auth_user_role.ROLE_ID = auth_role.ID
        WHERE
        auth_user_role.USER_ID = auth_user.ID
        ) AS roles
        FROM auth_user
        LEFT JOIN auth_user crt ON auth_user.CREATOR = crt.id
        LEFT JOIN auth_user mdf ON auth_user.MODIFIER = mdf.id
        <where>
            <if test="account != null">
                AND auth_user.ACCOUNT LIKE CONCAT('%', #{account}, '%')
            </if>
            <if test="passwd != null">
                AND auth_user.PASSWD LIKE CONCAT('%', #{passwd}, '%')
            </if>
            <if test="name != null">
                AND auth_user.NAME LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="phone != null">
                AND auth_user.PHONE LIKE CONCAT('%', #{phone}, '%')
            </if>
            <if test="beginCreateTime != null">
                AND auth_user.CREATE_TIME >= #{beginCreateTime}
            </if>
            <if test="endCreateTime != null">
                AND #{endCreateTime} >= auth_user.CREATE_TIME
            </if>
            auth_user.deleted = 0
        </where>
        ORDER BY ID DESC
    </select>

    <select id="selectAll" resultType="User">
        SELECT * FROM auth_user
    </select>

    <!-- 自定义sql -->

    <!-- 根据账号查询用户 -->
    <select id="selectByAccount" resultType="User">
        SELECT * FROM auth_user WHERE account = #{account}
    </select>

    <!-- 获得某个用户下的角色ID集合 -->
    <select id="selectRoleIdListByUserId" resultType="long">
        SELECT ROLE_ID FROM auth_user_role WHERE USER_ID = #{value}
    </select>


    <!-- 删除用户角色关系 -->
    <delete id="delRoleRelationShip">
        DELETE FROM auth_user_role WHERE user_id = #{value}
    </delete>

    <!-- 保存用户角色关系 -->
    <insert id="insertRoleRelationShip">
        INSERT INTO auth_user_role
        (
        `user_id`,
        `role_id`
        )
        values
        <foreach collection="roleIdList" item="item" index="index" separator=",">
            (
            #{userId},
            #{item}
            )
        </foreach>
    </insert>
</mapper>